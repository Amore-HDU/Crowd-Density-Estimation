name: "MCNN_pretrain3"
layer {
  name: "data"
  type: "Data"
  top: "data"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 1.0000000000
  }
  data_param {
    source: "data/Part_A/train_lmdb/image_lmdb"
    batch_size: 1
    backend: LMDB
  }
}
layer {
  name: "densitymap"
  type: "Data"
  top: "densitymap"
  include {
    phase: TRAIN
  }
  transform_param {
    scale: 1.0000000000
  }
  data_param {
    source: "data/Part_A/train_lmdb/dmap_lmdb"
    batch_size: 1
    backend: LMDB
  }
}
layer {
  name: "conv3_1"
  type: "Convolution"
  bottom: "data"
  top: "conv3_1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    pad: 4
    kernel_size: 9
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3_1"
  type: "ReLU"
  bottom: "conv3_1"
  top: "conv3_1"
}
layer {
  name: "conv3_2"
  type: "Convolution"
  bottom: "conv3_1"
  top: "conv3_2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    pad: 4
    kernel_size: 9
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3_2"
  type: "ReLU"
  bottom: "conv3_2"
  top: "conv3_2"
}
layer {
  name: "pool3_2"
  type: "Pooling"
  bottom: "conv3_2"
  top: "pool3_2"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_3"
  type: "Convolution"
  bottom: "pool3_2"
  top: "conv3_3"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 128
    pad: 4
    kernel_size: 9
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3_3"
  type: "ReLU"
  bottom: "conv3_3"
  top: "conv3_3"
}
layer {
  name: "conv3_4"
  type: "Convolution"
  bottom: "conv3_3"
  top: "conv3_4"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 128
    pad: 4
    kernel_size: 9
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3_4"
  type: "ReLU"
  bottom: "conv3_4"
  top: "conv3_4"
}
layer {
  name: "pool3_4"
  type: "Pooling"
  bottom: "conv3_4"
  top: "pool3_4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "conv3_5"
  type: "Convolution"
  bottom: "pool3_4"
  top: "conv3_5"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 3
    kernel_size: 7
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3_5"
  type: "ReLU"
  bottom: "conv3_5"
  top: "conv3_5"
}
layer {
  name: "conv3_6"
  type: "Convolution"
  bottom: "conv3_5"
  top: "conv3_6"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 256
    pad: 3
    kernel_size: 7
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3_6"
  type: "ReLU"
  bottom: "conv3_6"
  top: "conv3_6"
}
layer {
  name: "conv"
  type: "Convolution"
  bottom: "conv3_6"
  top: "estdmap"
  convolution_param {
    num_output: 1
    kernel_size:1
    weight_filler {
      type: "gaussian"
      std: 0.01000000
    }
  }
}
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "estdmap"
  bottom: "densitymap"
  top: "loss"
}
